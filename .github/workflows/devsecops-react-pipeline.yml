name: CI-CD-Security-React

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Secret Scanning with Gitleaks
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-banner --redact

      # SAST with Semgrep
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"

      # Build React app into Docker image
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          docker build -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Container scanning with Trivy
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'table'
          exit-code: '0'

      # IaC scanning with Checkov
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .

      # Push Docker image to GHCR
      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RG }}
          cluster-name: ${{ secrets.AKS_CLUSTER }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
