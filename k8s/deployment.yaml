apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app
  namespace: react-app-ns
  labels:
    app: react-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      securityContext:           # Pod-level security context
        runAsUser: 10100
        runAsGroup: 10100
        fsGroup: 10100
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: react-app-sa
      automountServiceAccountToken: false
      containers:
        - name: react-app
          image: ghcr.io/<org>/<repo>@sha256:<digest>
          ports:
            - containerPort: 80
          securityContext:       # Container-level security context
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            runAsUser: 10100      # Must be a high UID

          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: react-app-sa
  namespace: react-app-ns
automountServiceAccountToken: false

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: react-app-netpol
  namespace: react-app-ns
spec:
  podSelector:
    matchLabels:
      app: react-app
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 8080
          
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-svc
  namespace: react-app-ns
  labels:
    app: react-app
spec:
  type: ClusterIP   # change to LoadBalancer or NodePort if you want external access
  selector:
    app: react-app
  ports:
    - name: http
      protocol: TCP
      port: 80        # client-facing port
      targetPort: 8080 # container port
